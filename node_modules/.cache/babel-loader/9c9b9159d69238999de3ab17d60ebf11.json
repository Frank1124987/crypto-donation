{"remainingRequest":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/node_modules/babel-loader/lib/index.js!/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/src/firestore/firestoreFunc.js","dependencies":[{"path":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/src/firestore/firestoreFunc.js","mtime":1642503172340},{"path":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy93ZWlmYW40NTY5OTA4L0RvY3VtZW50cy9DcnlwdG9fRG9uYXRpb24vY3J5cHRvLWRvbmF0ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3dlaWZhbjQ1Njk5MDgvRG9jdW1lbnRzL0NyeXB0b19Eb25hdGlvbi9jcnlwdG8tZG9uYXRlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL3dlaWZhbjQ1Njk5MDgvRG9jdW1lbnRzL0NyeXB0b19Eb25hdGlvbi9jcnlwdG8tZG9uYXRlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCB7IGZpcmViYXNlQVBQIH0gZnJvbSAiLi9maXJlc3RvcmVJbml0LmpzIjsKaW1wb3J0IHsgZ2V0RmlyZXN0b3JlLCBjb2xsZWN0aW9uLCBnZXREb2MsIGRvYywgc2V0RG9jLCBhZGREb2MsIGdldERvY3MgfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSc7CmltcG9ydCB7IGdldEF1dGgsIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIH0gZnJvbSAiZmlyZWJhc2UvYXV0aCI7CmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvaW5kZXguanMnOwppbXBvcnQgeyBORlRTdG9yYWdlLCBGaWxlIH0gZnJvbSAnbmZ0LnN0b3JhZ2UnOwp2YXIgZGIgPSBnZXRGaXJlc3RvcmUoKTsgLy8gY29uc3QgZG9jID0gY29sbGVjdGlvbihkYiwgInVzZXJBY2NvdW50VG9FdGhlcmV1bUlkIikKCnZhciBkYlNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGRiU2VydmljZShkYikgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGRiU2VydmljZSk7CgogICAgdGhpcy5kYiA9IGRiOwogIH0KCiAgX2NyZWF0ZUNsYXNzKGRiU2VydmljZSwgW3sKICAgIGtleTogInJlYWRBY2NvdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQWNjb3VudCh1aWQpIHsKICAgICAgdmFyIHBhdGggPSAidXNlckFjY291bnRUb0V0aGVyZXVtSWQvIiArIHVpZDsKICAgICAgZ2V0RG9jKGRvYyhkYiwgcGF0aCkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGlmIChyZXN1bHQuZXhpc3RzKCkpIHsKICAgICAgICAgIHZhciBkYXRhID0gcmVzdWx0LmRhdGEoKTsKICAgICAgICAgIHN0b3JlLmNvbW1pdCgic2V0VXNlckV0aGVyZXVtSWQiLCBkYXRhLmV0aGVyZXVtSWQpOyAvLyBzdG9yZS5jb21taXQoInNldEFkZHJlc3MiLCBkYXRhLmFkZHJlc3Nlcy5ldGhlcmV1bUFkZHJlc3MpCiAgICAgICAgfQogICAgICB9KTsKICAgIH0gLy8gd2hlbmV2ZXIgYW4gYWNjb3VudCBpcyBjcmVhdGUgZnJvbSBBdXRoLCBjcmVhdGUgYW4gYWNjb3JkaW5nIGV0aGVyZXVtSWQgYW5kIHN0b3JlIGluIGZpcmVzdG9yZQoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVFdGhlcmV1bUlkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFdGhlcmV1bUlkKHVpZCwgZGF0YXNldCkgewogICAgICBjb25zb2xlLmxvZyh1aWQsIGRhdGFzZXQpOwogICAgICBzZXREb2MoZG9jKGRiLCAidXNlckFjY291bnRUb0V0aGVyZXVtSWQiLCB1aWQpLCB7CiAgICAgICAgZXRoZXJldW1JZDogZGF0YXNldC5ldGhlcmV1bUlkCiAgICAgIH0sIHsKICAgICAgICBtZXJnZTogdHJ1ZQogICAgICB9KS50aGVuKGNvbnNvbGUubG9nKTsgLy8gc2V0RG9jKGRvYyhkYiwgInVzZXJBY2NvdW50VG9FdGhlcmV1bUlkLyIgKyB1aWQgKyAiL2FkZHJlc3NlcyIsIGRhdGFzZXQuZXRoZXJldW1BZGRyZXNzKSwge2FjdGl2ZTogdHJ1ZX0sIHttZXJnZTogdHJ1ZX0pLmNhdGNoKGNvbnNvbGUubG9nKQogICAgfQogIH0sIHsKICAgIGtleTogImdldEFsbEFjY291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbEFjY291bnQoKSB7CiAgICAgIGdldERvY3MoY29sbGVjdGlvbihkYiwgInVzZXJBY2NvdW50VG9FdGhlcmV1bUlkIikpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGRvYy5pZCwgIiwgdXNlcjoiLCBkb2MuZGF0YSgpLmV0aGVyZXVtSWQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVQbGFuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlUGxhbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShkZXBhcnRtZW50SWQsIHBsYW5OYW1lLCBpbWFnZSkgewogICAgICAgIHZhciBhcGlLZXksIGNsaWVudCwgbWV0YWRhdGEsIHRlbXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgYXBpS2V5ID0gJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUp6ZFdJaU9pSmthV1E2WlhSb2Nqb3dlRFkwUTJOR05FVmxNRU00TjJJMlFqWmxORUZEUlRSRlFXUmlOemcwTUdRMFJqVXlNak14TVRjaUxDSnBjM01pT2lKdVpuUXRjM1J2Y21GblpTSXNJbWxoZENJNk1UWXpPVFUwTkRReU5UZ3dOQ3dpYm1GdFpTSTZJbU55ZVhCMFgyUnZibUYwYVc5dUluMC5pR2g5bTI3LURuY09FZk1sMHZCRXk4ZlBXSUtZMzJlZVFMa21hdGZhd2JJJzsKICAgICAgICAgICAgICAgIGNsaWVudCA9IG5ldyBORlRTdG9yYWdlKHsKICAgICAgICAgICAgICAgICAgdG9rZW46IGFwaUtleQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQuc3RvcmUoewogICAgICAgICAgICAgICAgICBuYW1lOiBwbGFuTmFtZSwKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgICAgICAgICAgICBpbWFnZTogaW1hZ2UKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBtZXRhZGF0YSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICB0ZW1wID0ge307CiAgICAgICAgICAgICAgICB0ZW1wW3BsYW5OYW1lXSA9IG1ldGFkYXRhLnVybDsKICAgICAgICAgICAgICAgIHNldERvYyhkb2MoZGIsICJkZXBhcnRtZW50IiwgZGVwYXJ0bWVudElkKSwgdGVtcCwgewogICAgICAgICAgICAgICAgICBtZXJnZTogdHJ1ZQogICAgICAgICAgICAgICAgfSkudGhlbihjb25zb2xlLmxvZyk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjcmVhdGVQbGFuKF94LCBfeDIsIF94MykgewogICAgICAgIHJldHVybiBfY3JlYXRlUGxhbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlUGxhbjsKICAgIH0oKSAvLyBjcmVhdGVFdGhlcmV1bUFkZHJlc3NfSWQodWlkLCBhZGRyZXNzKXsKICAgIC8vIH0KCiAgfV0pOwoKICByZXR1cm4gZGJTZXJ2aWNlOwp9KCk7CgpleHBvcnQgZGVmYXVsdCBuZXcgZGJTZXJ2aWNlKGRiKTs="},{"version":3,"sources":["/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/src/firestore/firestoreFunc.js"],"names":["firebaseAPP","getFirestore","collection","getDoc","doc","setDoc","addDoc","getDocs","getAuth","signInWithEmailAndPassword","store","NFTStorage","File","db","dbService","uid","path","then","result","exists","data","commit","ethereumId","dataset","console","log","merge","forEach","id","departmentId","planName","image","apiKey","client","token","name","description","metadata","temp","url"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,SAAQC,YAAR,EAAsBC,UAAtB,EAAkCC,MAAlC,EAA0CC,GAA1C,EAA+CC,MAA/C,EAAuDC,MAAvD,EAA+DC,OAA/D,QAA6E,yBAA7E;AACA,SAASC,OAAT,EAAkBC,0BAAlB,QAAoD,eAApD;AACA,SAAQC,KAAR,QAAoB,mBAApB;AACA,SAAQC,UAAR,EAAoBC,IAApB,QAA+B,aAA/B;AAEA,IAAMC,EAAE,GAAGZ,YAAY,EAAvB,C,CACA;;IAEMa,S;AACF,qBAAYD,EAAZ,EAAe;AAAA;;AACX,SAAKA,EAAL,GAAUA,EAAV;AACH;;;;WAED,qBAAYE,GAAZ,EAAgB;AACZ,UAAMC,IAAI,GAAG,6BAA6BD,GAA1C;AACAZ,MAAAA,MAAM,CAACC,GAAG,CAACS,EAAD,EAAKG,IAAL,CAAJ,CAAN,CAAsBC,IAAtB,CAA2B,UAACC,MAAD,EAAY;AACnC,YAAIA,MAAM,CAACC,MAAP,EAAJ,EAAoB;AAChB,cAAMC,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAb;AACAV,UAAAA,KAAK,CAACW,MAAN,CAAa,mBAAb,EAAkCD,IAAI,CAACE,UAAvC,EAFgB,CAGhB;AACH;AACJ,OAND;AAOH,K,CAED;;;;WACA,0BAAiBP,GAAjB,EAAsBQ,OAAtB,EAA8B;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ,EAAiBQ,OAAjB;AACAlB,MAAAA,MAAM,CAACD,GAAG,CAACS,EAAD,EAAK,yBAAL,EAAgCE,GAAhC,CAAJ,EAA0C;AAACO,QAAAA,UAAU,EAAGC,OAAO,CAACD;AAAtB,OAA1C,EAA6E;AAACI,QAAAA,KAAK,EAAE;AAAR,OAA7E,CAAN,CAAmGT,IAAnG,CAAwGO,OAAO,CAACC,GAAhH,EAF0B,CAG1B;AACH;;;WAED,yBAAe;AACXlB,MAAAA,OAAO,CAACL,UAAU,CAACW,EAAD,EAAK,yBAAL,CAAX,CAAP,CAAmDI,IAAnD,CAAwD,UAAAC,MAAM,EAAI;AAC9DA,QAAAA,MAAM,CAACS,OAAP,CAAe,UAAAvB,GAAG,EAAI;AAClBoB,UAAAA,OAAO,CAACC,GAAR,CAAYrB,GAAG,CAACwB,EAAhB,EAAoB,SAApB,EAA+BxB,GAAG,CAACgB,IAAJ,GAAWE,UAA1C;AACH,SAFD;AAGH,OAJD;AAKH;;;;gFAED,iBAAiBO,YAAjB,EAA+BC,QAA/B,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,gBAAAA,MAFV,GAEmB,0PAFnB;AAGUC,gBAAAA,MAHV,GAGmB,IAAItB,UAAJ,CAAe;AAACuB,kBAAAA,KAAK,EAAGF;AAAT,iBAAf,CAHnB;AAAA;AAAA,uBAI2BC,MAAM,CAACvB,KAAP,CAAa;AAChCyB,kBAAAA,IAAI,EAAEL,QAD0B;AAEhCM,kBAAAA,WAAW,EAAE,EAFmB;AAGhCL,kBAAAA,KAAK,EAAEA;AAHyB,iBAAb,CAJ3B;;AAAA;AAIUM,gBAAAA,QAJV;AAUQC,gBAAAA,IAVR,GAUe,EAVf;AAWIA,gBAAAA,IAAI,CAACR,QAAD,CAAJ,GAAiBO,QAAQ,CAACE,GAA1B;AAEAlC,gBAAAA,MAAM,CAACD,GAAG,CAACS,EAAD,EAAK,YAAL,EAAmBgB,YAAnB,CAAJ,EAAsCS,IAAtC,EAA4C;AAACZ,kBAAAA,KAAK,EAAE;AAAR,iBAA5C,CAAN,CAAiET,IAAjE,CAAsEO,OAAO,CAACC,GAA9E;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAgBA;AAEA;;;;;;;AAGJ,eAAe,IAAIX,SAAJ,CAAcD,EAAd,CAAf","sourcesContent":["import { firebaseAPP } from \"./firestoreInit.js\"\nimport {getFirestore, collection, getDoc, doc, setDoc, addDoc, getDocs} from 'firebase/firestore/lite';\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\nimport {store} from '../store/index.js'\nimport {NFTStorage, File} from 'nft.storage'\n\nconst db = getFirestore()\n// const doc = collection(db, \"userAccountToEthereumId\")\n\nclass dbService{\n    constructor(db){\n        this.db = db\n    }\n\n    readAccount(uid){\n        const path = \"userAccountToEthereumId/\" + uid\n        getDoc(doc(db, path)).then((result) => {\n            if( result.exists()){\n                const data = result.data()\n                store.commit(\"setUserEthereumId\", data.ethereumId)\n                // store.commit(\"setAddress\", data.addresses.ethereumAddress)\n            }\n        })\n    }\n\n    // whenever an account is create from Auth, create an according ethereumId and store in firestore\n    createEthereumId(uid, dataset){\n        console.log(uid, dataset)\n        setDoc(doc(db, \"userAccountToEthereumId\", uid), {ethereumId : dataset.ethereumId}, {merge: true} ).then(console.log)\n        // setDoc(doc(db, \"userAccountToEthereumId/\" + uid + \"/addresses\", dataset.ethereumAddress), {active: true}, {merge: true}).catch(console.log)\n    }\n\n    getAllAccount(){\n        getDocs(collection(db, \"userAccountToEthereumId\")).then(result => {\n            result.forEach(doc => {\n                console.log(doc.id, \", user:\", doc.data().ethereumId)\n            })\n        })\n    }\n\n    async createPlan(departmentId, planName, image){\n\n        const apiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDY0Q2NGNEVlMEM4N2I2QjZlNEFDRTRFQWRiNzg0MGQ0RjUyMjMxMTciLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzOTU0NDQyNTgwNCwibmFtZSI6ImNyeXB0X2RvbmF0aW9uIn0.iGh9m27-DncOEfMl0vBEy8fPWIKY32eeQLkmatfawbI'\n        const client = new NFTStorage({token : apiKey})\n        const metadata = await client.store({\n            name: planName,\n            description: \"\",\n            image: image\n        })\n\n        let temp = {}\n        temp[planName] = metadata.url\n\n        setDoc(doc(db, \"department\", departmentId), temp, {merge: true}).then(console.log)\n    }\n\n    // createEthereumAddress_Id(uid, address){\n        \n    // }\n}\n\nexport default new dbService(db)"]}]}