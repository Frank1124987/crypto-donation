{"remainingRequest":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/node_modules/babel-loader/lib/index.js!/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/src/firestore/firestoreFunc.js","dependencies":[{"path":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/src/firestore/firestoreFunc.js","mtime":1639380901347},{"path":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvd2VpZmFuNDU2OTkwOC9Eb2N1bWVudHMvQ3J5cHRvX0RvbmF0aW9uL2NyeXB0by1kb25hdGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvd2VpZmFuNDU2OTkwOC9Eb2N1bWVudHMvQ3J5cHRvX0RvbmF0aW9uL2NyeXB0by1kb25hdGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCB7IGZpcmViYXNlQVBQIH0gZnJvbSAiLi9maXJlc3RvcmVJbml0LmpzIjsKaW1wb3J0IHsgZ2V0RmlyZXN0b3JlLCBjb2xsZWN0aW9uLCBnZXREb2MsIGRvYywgc2V0RG9jLCBhZGREb2MsIGdldERvY3MgfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUvbGl0ZSc7CmltcG9ydCB7IGdldEF1dGgsIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkIH0gZnJvbSAiZmlyZWJhc2UvYXV0aCI7CmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnLi4vc3RvcmUvaW5kZXguanMnOwp2YXIgZGIgPSBnZXRGaXJlc3RvcmUoKTsgLy8gY29uc3QgZG9jID0gY29sbGVjdGlvbihkYiwgInVzZXJBY2NvdW50VG9FdGhlcmV1bUlkIikKCnZhciBkYlNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGRiU2VydmljZShkYikgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGRiU2VydmljZSk7CgogICAgdGhpcy5kYiA9IGRiOwogIH0KCiAgX2NyZWF0ZUNsYXNzKGRiU2VydmljZSwgW3sKICAgIGtleTogInJlYWRBY2NvdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkQWNjb3VudCh1aWQpIHsKICAgICAgdmFyIHBhdGggPSAidXNlckFjY291bnRUb0V0aGVyZXVtSWQvIiArIHVpZDsKICAgICAgZ2V0RG9jKGRvYyhkYiwgcGF0aCkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIGlmIChyZXN1bHQuZXhpc3RzKCkpIHsKICAgICAgICAgIHZhciBkYXRhID0gcmVzdWx0LmRhdGEoKTsKICAgICAgICAgIHN0b3JlLmNvbW1pdCgic2V0VXNlckV0aGVyZXVtSWQiLCBkYXRhLmV0aGVyZXVtSWQpOyAvLyBzdG9yZS5jb21taXQoInNldEFkZHJlc3MiLCBkYXRhLmFkZHJlc3Nlcy5ldGhlcmV1bUFkZHJlc3MpCiAgICAgICAgfQogICAgICB9KTsKICAgIH0gLy8gd2hlbmV2ZXIgYW4gYWNjb3VudCBpcyBjcmVhdGUgZnJvbSBBdXRoLCBjcmVhdGUgYW4gYWNjb3JkaW5nIGV0aGVyZXVtSWQgYW5kIHN0b3JlIGluIGZpcmVzdG9yZQoKICB9LCB7CiAgICBrZXk6ICJjcmVhdGVFdGhlcmV1bUlkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVFdGhlcmV1bUlkKHVpZCwgZGF0YXNldCkgewogICAgICBjb25zb2xlLmxvZyh1aWQsIGRhdGFzZXQpOwogICAgICBzZXREb2MoZG9jKGRiLCAidXNlckFjY291bnRUb0V0aGVyZXVtSWQiLCB1aWQpLCB7CiAgICAgICAgZXRoZXJldW1JZDogZGF0YXNldC5ldGhlcmV1bUlkCiAgICAgIH0sIHsKICAgICAgICBtZXJnZTogdHJ1ZQogICAgICB9KS50aGVuKGNvbnNvbGUubG9nKTsgLy8gc2V0RG9jKGRvYyhkYiwgInVzZXJBY2NvdW50VG9FdGhlcmV1bUlkLyIgKyB1aWQgKyAiL2FkZHJlc3NlcyIsIGRhdGFzZXQuZXRoZXJldW1BZGRyZXNzKSwge2FjdGl2ZTogdHJ1ZX0sIHttZXJnZTogdHJ1ZX0pLmNhdGNoKGNvbnNvbGUubG9nKQogICAgfQogIH0sIHsKICAgIGtleTogImdldEFsbEFjY291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbEFjY291bnQoKSB7CiAgICAgIGdldERvY3MoY29sbGVjdGlvbihkYiwgInVzZXJBY2NvdW50VG9FdGhlcmV1bUlkIikpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGRvYy5pZCwgIiwgdXNlcjoiLCBkb2MuZGF0YSgpLmV0aGVyZXVtSWQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0gLy8gY3JlYXRlRXRoZXJldW1BZGRyZXNzX0lkKHVpZCwgYWRkcmVzcyl7CiAgICAvLyB9CgogIH1dKTsKCiAgcmV0dXJuIGRiU2VydmljZTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgbmV3IGRiU2VydmljZShkYik7"},{"version":3,"sources":["/Users/weifan4569908/Documents/Crypto_Donation/crypto-donate/src/firestore/firestoreFunc.js"],"names":["firebaseAPP","getFirestore","collection","getDoc","doc","setDoc","addDoc","getDocs","getAuth","signInWithEmailAndPassword","store","db","dbService","uid","path","then","result","exists","data","commit","ethereumId","dataset","console","log","merge","forEach","id"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,SAAQC,YAAR,EAAsBC,UAAtB,EAAkCC,MAAlC,EAA0CC,GAA1C,EAA+CC,MAA/C,EAAuDC,MAAvD,EAA+DC,OAA/D,QAA6E,yBAA7E;AACA,SAASC,OAAT,EAAkBC,0BAAlB,QAAoD,eAApD;AACA,SAAQC,KAAR,QAAoB,mBAApB;AAEA,IAAMC,EAAE,GAAGV,YAAY,EAAvB,C,CACA;;IAEMW,S;AACF,qBAAYD,EAAZ,EAAe;AAAA;;AACX,SAAKA,EAAL,GAAUA,EAAV;AACH;;;;WAED,qBAAYE,GAAZ,EAAgB;AACZ,UAAMC,IAAI,GAAG,6BAA6BD,GAA1C;AACAV,MAAAA,MAAM,CAACC,GAAG,CAACO,EAAD,EAAKG,IAAL,CAAJ,CAAN,CAAsBC,IAAtB,CAA2B,UAACC,MAAD,EAAY;AACnC,YAAIA,MAAM,CAACC,MAAP,EAAJ,EAAoB;AAChB,cAAMC,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAb;AACAR,UAAAA,KAAK,CAACS,MAAN,CAAa,mBAAb,EAAkCD,IAAI,CAACE,UAAvC,EAFgB,CAGhB;AACH;AACJ,OAND;AAOH,K,CAED;;;;WACA,0BAAiBP,GAAjB,EAAsBQ,OAAtB,EAA8B;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ,EAAiBQ,OAAjB;AACAhB,MAAAA,MAAM,CAACD,GAAG,CAACO,EAAD,EAAK,yBAAL,EAAgCE,GAAhC,CAAJ,EAA0C;AAACO,QAAAA,UAAU,EAAGC,OAAO,CAACD;AAAtB,OAA1C,EAA6E;AAACI,QAAAA,KAAK,EAAE;AAAR,OAA7E,CAAN,CAAmGT,IAAnG,CAAwGO,OAAO,CAACC,GAAhH,EAF0B,CAG1B;AACH;;;WAED,yBAAe;AACXhB,MAAAA,OAAO,CAACL,UAAU,CAACS,EAAD,EAAK,yBAAL,CAAX,CAAP,CAAmDI,IAAnD,CAAwD,UAAAC,MAAM,EAAI;AAC9DA,QAAAA,MAAM,CAACS,OAAP,CAAe,UAAArB,GAAG,EAAI;AAClBkB,UAAAA,OAAO,CAACC,GAAR,CAAYnB,GAAG,CAACsB,EAAhB,EAAoB,SAApB,EAA+BtB,GAAG,CAACc,IAAJ,GAAWE,UAA1C;AACH,SAFD;AAGH,OAJD;AAKH,K,CACD;AAEA;;;;;;;AAGJ,eAAe,IAAIR,SAAJ,CAAcD,EAAd,CAAf","sourcesContent":["import { firebaseAPP } from \"./firestoreInit.js\"\nimport {getFirestore, collection, getDoc, doc, setDoc, addDoc, getDocs} from 'firebase/firestore/lite';\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\nimport {store} from '../store/index.js'\n\nconst db = getFirestore()\n// const doc = collection(db, \"userAccountToEthereumId\")\n\nclass dbService{\n    constructor(db){\n        this.db = db\n    }\n\n    readAccount(uid){\n        const path = \"userAccountToEthereumId/\" + uid\n        getDoc(doc(db, path)).then((result) => {\n            if( result.exists()){\n                const data = result.data()\n                store.commit(\"setUserEthereumId\", data.ethereumId)\n                // store.commit(\"setAddress\", data.addresses.ethereumAddress)\n            }\n        })\n    }\n\n    // whenever an account is create from Auth, create an according ethereumId and store in firestore\n    createEthereumId(uid, dataset){\n        console.log(uid, dataset)\n        setDoc(doc(db, \"userAccountToEthereumId\", uid), {ethereumId : dataset.ethereumId}, {merge: true} ).then(console.log)\n        // setDoc(doc(db, \"userAccountToEthereumId/\" + uid + \"/addresses\", dataset.ethereumAddress), {active: true}, {merge: true}).catch(console.log)\n    }\n\n    getAllAccount(){\n        getDocs(collection(db, \"userAccountToEthereumId\")).then(result => {\n            result.forEach(doc => {\n                console.log(doc.id, \", user:\", doc.data().ethereumId)\n            })\n        })\n    }\n    // createEthereumAddress_Id(uid, address){\n        \n    // }\n}\n\nexport default new dbService(db)"]}]}